<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/appbibliofilia/ui/main/MainScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/appbibliofilia/ui/main/MainScreen.kt" />
              <option name="originalContent" value="package com.example.appbibliofilia.ui.main&#10;&#10;import android.util.Log&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.animateDpAsState&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun MainScreen(isLoggedIn: Boolean = false, userName: String? = null, onLogout: (() -&gt; Unit)? = null) {&#10;    val scrollState = rememberScrollState()&#10;&#10;    Surface(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFFFF7F0))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .verticalScroll(scrollState)&#10;                .fillMaxSize()&#10;        ) {&#10;            HeaderSection(isLoggedIn = isLoggedIn, userName = userName, onLogout = onLogout)&#10;            HeroSection()&#10;            HowItWorksSection()&#10;            FAQSection()&#10;            FooterSection()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HeaderSection(isLoggedIn: Boolean = false, userName: String? = null, onLogout: (() -&gt; Unit)? = null) {&#10;    val shouldShowGreeting = isLoggedIn &amp;&amp; !userName.isNullOrBlank()&#10;&#10;    // bandera local para controlar la visibilidad y forzar la animación al montar&#10;    var visible by remember { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(shouldShowGreeting) {&#10;        Log.d(&quot;MainScreen&quot;, &quot;LaunchedEffect shouldShowGreeting=$shouldShowGreeting&quot;)&#10;        if (shouldShowGreeting) {&#10;            visible = false&#10;            Log.d(&quot;MainScreen&quot;, &quot;set visible=false&quot;)&#10;            delay(500) // retraso corto para forzar el toggle&#10;            visible = true&#10;            Log.d(&quot;MainScreen&quot;, &quot;set visible=true&quot;)&#10;        } else {&#10;            visible = false&#10;            Log.d(&quot;MainScreen&quot;, &quot;set visible=false (shouldShowGreeting=false)&quot;)&#10;        }&#10;    }&#10;&#10;    // animaciones explícitas&#10;    val greetingAlpha by animateFloatAsState(targetValue = if (visible) 1f else 0f, animationSpec = tween(durationMillis = 1000))&#10;    val greetingOffsetY by animateDpAsState(targetValue = if (visible) 0.dp else 12.dp, animationSpec = tween(durationMillis = 1000))&#10;    val greetingScale by animateFloatAsState(targetValue = if (visible) 1f else 0.98f, animationSpec = tween(durationMillis = 1000))&#10;&#10;    // Loguear alpha para ver la transición&#10;    LaunchedEffect(greetingAlpha) {&#10;        Log.d(&quot;MainScreen&quot;, &quot;greetingAlpha=$greetingAlpha visible=$visible shouldShowGreeting=$shouldShowGreeting&quot;)&#10;    }&#10;&#10;    Surface(&#10;        color = Color(0xFFFFF7F0),&#10;        tonalElevation = 4.dp,&#10;        shadowElevation = 2.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // Greeting block (animado)&#10;            val showGreetingBlock = visible || greetingAlpha &gt; 0.01f&#10;            if (showGreetingBlock &amp;&amp; !userName.isNullOrBlank()) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .graphicsLayer { alpha = greetingAlpha; scaleX = greetingScale; scaleY = greetingScale }&#10;                        .offset(y = greetingOffsetY)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Hola, ${userName}&quot;,&#10;                        style = TextStyle(&#10;                            fontFamily = FontFamily.Serif,&#10;                            fontSize = 20.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color(0xFF2B2B2B)&#10;                        )&#10;                    )&#10;                    Text(&#10;                        text = &quot;Bienvenido a tu Biblihogar&quot;,&#10;                        style = TextStyle(&#10;                            fontFamily = FontFamily.SansSerif,&#10;                            fontSize = 14.sp,&#10;                            color = Color(0xFF5A5A5A)&#10;                        )&#10;                    )&#10;                }&#10;            } else {&#10;                // título por defecto&#10;                Text(&#10;                    text = &quot;Bibliofilia&quot;,&#10;                    style = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 22.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF2B2B2B)&#10;                    )&#10;                )&#10;            }&#10;&#10;            if (isLoggedIn) {&#10;                Button(&#10;                    onClick = { onLogout?.invoke() },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Color(0xFFFFD6D6),&#10;                        contentColor = Color(0xFF2B2B2B)&#10;                    ),&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&quot;Cerrar sesión&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HeroSection() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(Color(0xFFFFF7F0))&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Tus colecciones y progresos de lectura en un solo lugar &quot;,&#10;            style = TextStyle(&#10;                fontFamily = FontFamily.Serif,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 28.sp,&#10;                color = Color(0xFF2B2B2B),&#10;                textAlign = TextAlign.Center&#10;            ),&#10;            textAlign = TextAlign.Center&#10;        )&#10;        Spacer(Modifier.height(12.dp))&#10;        Text(&#10;            text = &quot;Registra lo que lees, prioriza lo que viene y cierra más libros cada mes.&quot;,&#10;            style = TextStyle(&#10;                fontFamily = FontFamily.SansSerif,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF2B2B2B),&#10;                textAlign = TextAlign.Center&#10;            ),&#10;            textAlign = TextAlign.Center&#10;        )&#10;        Spacer(Modifier.height(24.dp))&#10;        Button(&#10;            onClick = { /* TODO */ },&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color(0xFFBFE3D0),&#10;                contentColor = Color(0xFF2B2B2B)&#10;            ),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Text(&quot;Colecciones&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HowItWorksSection() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(Color.White)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Cómo funciona&quot;,&#10;            style = TextStyle(&#10;                fontFamily = FontFamily.Serif,&#10;                fontSize = 26.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF2B2B2B)&#10;            )&#10;        )&#10;        Spacer(Modifier.height(24.dp))&#10;        repeat(3) { index -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color(0xFFF3F6F8))&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(20.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .background(Color(0xFFBFE3D0), RoundedCornerShape(50))&#10;                    ) {&#10;                        // TODO: Ícono o imagen&#10;                    }&#10;                    Spacer(Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Información del libro actual\n&quot;,&#10;                        fontFamily = FontFamily.Serif,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 18.sp,&#10;                        color = Color(0xFF2B2B2B)&#10;                    )&#10;                    Spacer(Modifier.height(6.dp))&#10;                    Text(&#10;                        text = &quot;Libro físico o digital, páginas de progreso, colección a la que pertenece&quot;,&#10;                        fontFamily = FontFamily.SansSerif,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF5A5A5A),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;&#10;&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FAQSection() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(Color.White)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Preguntas Frecuentes&quot;,&#10;            fontFamily = FontFamily.Serif,&#10;            fontSize = 26.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color(0xFF2B2B2B)&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        val faqs = listOf(&#10;            &quot;¿Qué es Bibliofilia?&quot; to &quot;Una plataforma para amantes de los libros.&quot;,&#10;            &quot;¿Puedo compartir mis lecturas?&quot; to &quot;Sí, puedes compartir tus libros favoritos.&quot;,&#10;            &quot;¿Tiene costo?&quot; to &quot;No, es totalmente gratuita.&quot;&#10;        )&#10;        faqs.forEach { (q, a) -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 6.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color(0xFFF3F6F8)),&#10;                shape = RoundedCornerShape(10.dp)&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Text(q, fontWeight = FontWeight.Bold, fontSize = 16.sp)&#10;                    Spacer(Modifier.height(4.dp))&#10;                    Text(a, fontSize = 14.sp, color = Color(0xFF5A5A5A))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FooterSection() {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        color = Color(0xFFF3F6F8)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                &quot;© 2025 Bibliofilia. Todos los derechos reservados.&quot;,&#10;                fontSize = 14.sp,&#10;                color = Color(0xFF2B2B2B)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(&#10;    showBackground = true,&#10;    showSystemUi = true,&#10;    name = &quot;Vista previa - Pantalla Principal (logueado)&quot;&#10;)&#10;@Composable&#10;fun MainScreenPreview() {&#10;    MainScreen(isLoggedIn = true, userName = &quot;Alice López&quot;)&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.appbibliofilia.ui.main&#10;&#10;import android.util.Log&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.animateDpAsState&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun MainScreen(isLoggedIn: Boolean = false, userName: String? = null, onLogout: (() -&gt; Unit)? = null) {&#10;    val scrollState = rememberScrollState()&#10;&#10;    Surface(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color(0xFFFFF7F0))&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .verticalScroll(scrollState)&#10;                .fillMaxSize()&#10;        ) {&#10;            HeaderSection(isLoggedIn = isLoggedIn, userName = userName, onLogout = onLogout)&#10;            HeroSection()&#10;            HowItWorksSection()&#10;            FAQSection()&#10;            FooterSection()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HeaderSection(isLoggedIn: Boolean = false, userName: String? = null, onLogout: (() -&gt; Unit)? = null) {&#10;    val shouldShowGreeting = isLoggedIn &amp;&amp; !userName.isNullOrBlank()&#10;&#10;    // bandera local para controlar la visibilidad y forzar la animación al montar&#10;    var visible by remember { mutableStateOf(false) }&#10;&#10;    LaunchedEffect(shouldShowGreeting) {&#10;        Log.d(&quot;MainScreen&quot;, &quot;LaunchedEffect shouldShowGreeting=$shouldShowGreeting&quot;)&#10;        if (shouldShowGreeting) {&#10;            visible = false&#10;            Log.d(&quot;MainScreen&quot;, &quot;set visible=false&quot;)&#10;            delay(500) // retraso corto para forzar el toggle&#10;            visible = true&#10;            Log.d(&quot;MainScreen&quot;, &quot;set visible=true&quot;)&#10;        } else {&#10;            visible = false&#10;            Log.d(&quot;MainScreen&quot;, &quot;set visible=false (shouldShowGreeting=false)&quot;)&#10;        }&#10;    }&#10;&#10;    // animaciones explícitas&#10;    val greetingAlpha by animateFloatAsState(targetValue = if (visible) 1f else 0f, animationSpec = tween(durationMillis = 1000))&#10;    val greetingOffsetY by animateDpAsState(targetValue = if (visible) 0.dp else 12.dp, animationSpec = tween(durationMillis = 1000))&#10;    val greetingScale by animateFloatAsState(targetValue = if (visible) 1f else 0.98f, animationSpec = tween(durationMillis = 1000))&#10;&#10;    // Loguear alpha para ver la transición&#10;    LaunchedEffect(greetingAlpha) {&#10;        Log.d(&quot;MainScreen&quot;, &quot;greetingAlpha=$greetingAlpha visible=$visible shouldShowGreeting=$shouldShowGreeting&quot;)&#10;    }&#10;&#10;    Surface(&#10;        color = Color(0xFFFFF7F0),&#10;        tonalElevation = 4.dp,&#10;        shadowElevation = 2.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // Greeting block (animado)&#10;            val showGreetingBlock = visible || greetingAlpha &gt; 0.01f&#10;            if (showGreetingBlock &amp;&amp; !userName.isNullOrBlank()) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .graphicsLayer { alpha = greetingAlpha; scaleX = greetingScale; scaleY = greetingScale }&#10;                        .offset(y = greetingOffsetY)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Hola, ${userName}&quot;,&#10;                        style = TextStyle(&#10;                            fontFamily = FontFamily.Serif,&#10;                            fontSize = 20.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color(0xFF2B2B2B)&#10;                        )&#10;                    )&#10;                    Text(&#10;                        text = &quot;Bienvenido a tu Biblihogar&quot;,&#10;                        style = TextStyle(&#10;                            fontFamily = FontFamily.SansSerif,&#10;                            fontSize = 14.sp,&#10;                            color = Color(0xFF5A5A5A)&#10;                        )&#10;                    )&#10;                }&#10;            } else {&#10;                // título por defecto&#10;                Text(&#10;                    text = &quot;Bibliofilia&quot;,&#10;                    style = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 22.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF2B2B2B)&#10;                    )&#10;                )&#10;            }&#10;&#10;            if (isLoggedIn) {&#10;                Button(&#10;                    onClick = { onLogout?.invoke() },&#10;                    colors = ButtonDefaults.buttonColors(&#10;                        containerColor = Color(0xFFFFD6D6),&#10;                        contentColor = Color(0xFF2B2B2B)&#10;                    ),&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&quot;Cerrar sesión&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HeroSection() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(Color(0xFFFFF7F0))&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Tus colecciones y progresos de lectura en un solo lugar &quot;,&#10;            style = TextStyle(&#10;                fontFamily = FontFamily.Serif,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 28.sp,&#10;                color = Color(0xFF2B2B2B),&#10;                textAlign = TextAlign.Center&#10;            ),&#10;            textAlign = TextAlign.Center&#10;        )&#10;        Spacer(Modifier.height(12.dp))&#10;        Text(&#10;            text = &quot;Registra lo que lees, prioriza lo que viene y cierra más libros cada mes.&quot;,&#10;            style = TextStyle(&#10;                fontFamily = FontFamily.SansSerif,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF2B2B2B),&#10;                textAlign = TextAlign.Center&#10;            ),&#10;            textAlign = TextAlign.Center&#10;        )&#10;        Spacer(Modifier.height(24.dp))&#10;        Button(&#10;            onClick = { /* TODO */ },&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color(0xFFBFE3D0),&#10;                contentColor = Color(0xFF2B2B2B)&#10;            ),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Text(&quot;Colecciones&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HowItWorksSection() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(Color.White)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Cómo funciona&quot;,&#10;            style = TextStyle(&#10;                fontFamily = FontFamily.Serif,&#10;                fontSize = 26.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF2B2B2B)&#10;            )&#10;        )&#10;        Spacer(Modifier.height(24.dp))&#10;        // Cuatro tarjetas distintas con número dentro de círculo mint&#10;        val cards = listOf(&#10;            Pair(&quot;Información del libro actual&quot;, &quot;Libro físico o digital, páginas de progreso, colección a la que pertenece&quot;),&#10;            Pair(&quot;Timer de lectura&quot;, &quot;Sesiones con temporizador que grabarán tus progresos.&quot;),&#10;            Pair(&quot;Registro de libros leídos&quot;, &quot;Historial, reportes, tus opiniones, notas y objetivos de lectura.&quot;),&#10;            Pair(&quot;Colecciones&quot;, &quot;Sagas, géneros, autores, categoriza por libros físicos o digitales.&quot;)&#10;        )&#10;&#10;        cards.forEachIndexed { index, item -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color(0xFFF3F6F8))&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(20.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(60.dp)&#10;                            .background(Color(0xFFBFE3D0), RoundedCornerShape(50)),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}&quot;,&#10;                            style = TextStyle(&#10;                                fontFamily = FontFamily.Serif,&#10;                                fontWeight = FontWeight.Bold,&#10;                                fontSize = 20.sp,&#10;                                color = Color(0xFF2B2B2B),&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                        )&#10;                    }&#10;                    Spacer(Modifier.height(8.dp))&#10;                    Text(&#10;                        text = item.first,&#10;                        fontFamily = FontFamily.Serif,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontSize = 18.sp,&#10;                        color = Color(0xFF2B2B2B)&#10;                    )&#10;                    Spacer(Modifier.height(6.dp))&#10;                    Text(&#10;                        text = item.second,&#10;                        fontFamily = FontFamily.SansSerif,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF5A5A5A),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FAQSection() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(Color.White)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;Preguntas Frecuentes&quot;,&#10;            style = TextStyle(&#10;                fontFamily = FontFamily.Serif,&#10;                fontSize = 26.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF2B2B2B)&#10;            )&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        val faqs = listOf(&#10;            &quot;¿Qué es Bibliofilia?&quot; to &quot;Una plataforma para amantes de los libros.&quot;,&#10;            &quot;¿Puedo compartir mis lecturas?&quot; to &quot;Sí, puedes compartir tus libros favoritos.&quot;,&#10;            &quot;¿Tiene costo?&quot; to &quot;No, es totalmente gratuita.&quot;&#10;        )&#10;        faqs.forEach { (q, a) -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 6.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color(0xFFF3F6F8)),&#10;                shape = RoundedCornerShape(10.dp)&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Text(q, fontWeight = FontWeight.Bold, fontSize = 16.sp)&#10;                    Spacer(Modifier.height(4.dp))&#10;                    Text(a, fontSize = 14.sp, color = Color(0xFF5A5A5A))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FooterSection() {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        color = Color(0xFFF3F6F8)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                &quot;© 2025 Bibliofilia. Todos los derechos reservados.&quot;,&#10;                fontSize = 14.sp,&#10;                color = Color(0xFF2B2B2B)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun MainScreenPreview() {&#10;    MainScreen(isLoggedIn = true, userName = &quot;Alice&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>